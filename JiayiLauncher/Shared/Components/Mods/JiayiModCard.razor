@using JiayiLauncher.Features.Mods
@using JiayiLauncher.Pages
@using JiayiLauncher.Features.Launch
@using JiayiLauncher.Features.Bridge
@using System.Diagnostics

<div class="mod-background" @onmouseenter="MouseOver" @onmouseleave="MouseLeave">
    <div class="mod-header">
        <strong>@Mod.Name</strong>
        
        @if (Mod.FromInternet)
        {
            <span class="material-symbols-sharp" title="Downloaded from the web">cloud_download</span>
        }
        else
        {
            <span class="material-symbols-sharp" title="Stored locally">hard_drive_2</span>
        }
    </div>
    <p class="mod-version">Works on @(string.Join(", ", Mod.SupportedVersions))</p>
    <div class="mod-controls">
        <JiayiButton OnClick="LaunchClicked" Size="16px" Style="padding: 0.5rem 1.5rem;" @ref="_launchButton">Launch</JiayiButton>
        <span class="material-symbols-sharp" style="cursor: pointer; opacity: @_controlsOpacity;" title="Edit mod" @onclick="EditClicked">edit</span>
        <span class="material-symbols-sharp" style="color: darkred; cursor: pointer; opacity: @_controlsOpacity;" title="Delete mod (irreversible)" @onclick="DeleteClicked">delete</span>
    </div>
</div>

@code {
    [Parameter] public Mod Mod { get; set; } = null!;

    [CascadingParameter]
    public IModalService ModalService { get; set; } = default!;
    
    private string _controlsOpacity = "0";
    
    private bool _launching;
    // percentage to rem from 0-7
    private string _launchProgress => _launching ? $"box-shadow: {Launcher.LaunchProgress * .07:0.00}rem 0 0 0 rgb(255, 55, 55);" : "";

    private JiayiButton? _launchButton;

    private async Task LaunchClicked()
    {
        if (Launcher.Launching) return;

        Launcher.LaunchResult result;
        
        if (Minecraft.ModsLoaded.Contains(Mod))
        {
            // TODO: notify user that mod is already loaded
            result = Launcher.LaunchResult.Success;
            return;
        }

        if (Minecraft.ModsLoaded.Count > 0)
        {
            var options = new List<(string, EventCallback)>
            {
                ("Yes", new EventCallback(null, async () =>
                {
                    result = await Launcher.Launch(Mod);
                })),
                ("No", EventCallback.Empty)
            };
            
            var parameters = new ModalParameters()
                .Add(nameof(MessageBox.Buttons), options)
                .Add(nameof(MessageBox.Message), $"Launching more than one mod at a time can make your game unstable. Are you sure you want to launch {Mod.Name}?");
            
            ModalService.Show<MessageBox>("Warning", parameters);
        }
        
        StateHasChanged();
    }

    private async Task Launch()
    {
        
    }

    private void MouseOver()
    {
        _controlsOpacity = "100%";
        StateHasChanged();
    }

    private void MouseLeave()
    {
        _controlsOpacity = "0";
        StateHasChanged();
    }

    private void EditClicked()
    {
        var parameters = new ModalParameters()
            .Add(nameof(EditMod.Mod), Mod);
            
        ModalService.Show<EditMod>("Edit mod", parameters);
    }

    private void DeleteClicked()
    {
        var options = new List<(string, EventCallback)>
        {
            ("Yes", new EventCallback(null, () =>
            {
                Mod.Delete(ModCollection.Current!);
                Mods.Instance.Refresh();
            })),
            ("No", EventCallback.Empty)
        };

        var parameters = new ModalParameters()
            .Add(nameof(MessageBox.Buttons), options)
            .Add(nameof(MessageBox.Message), $"Are you sure you want to delete {Mod.Name}? This action is irreversible.");
        
        ModalService.Show<MessageBox>("Delete mod", parameters);
    }

}