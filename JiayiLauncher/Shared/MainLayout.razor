@inherits LayoutComponentBase
@inject NavigationManager NavigationManager

<Sidebar @ref="_sidebar"/>

<main style="margin-left: @_margin" @onkeydown="KeyDown">
    @Body
</main>

@code {
    private Sidebar? _sidebar;
    private string _margin = "5.5rem";
    
    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender) return;
        if (_sidebar != null) _sidebar.OnToggle += ChangeMargin;
    }

    private void ChangeMargin(object? sender, EventArgs e)
    {
        _margin = _margin == "5.5rem" ? "13.5rem" : "5.5rem";
        StateHasChanged();
    }
    
    private List<string> _konami = new() { "ArrowUp", "ArrowUp", "ArrowDown", "ArrowDown", "ArrowLeft", "ArrowRight", "ArrowLeft", "ArrowRight", "b", "a", "Enter" };
    private string _nextKey = "ArrowUp";

    private void KeyDown(KeyboardEventArgs obj)
    {
        if (obj.Key == _nextKey)
        {
            _konami.RemoveAt(0);
            _nextKey = _konami.FirstOrDefault();
        }
        else
        {
            _konami = new List<string> { "ArrowUp", "ArrowUp", "ArrowDown", "ArrowDown", "ArrowLeft", "ArrowRight", "ArrowLeft", "ArrowRight", "KeyB", "KeyA", "Enter" };
            _nextKey = _konami.FirstOrDefault();
        }
        
        if (_konami.Count == 0)
        {
            _konami = new List<string> { "ArrowUp", "ArrowUp", "ArrowDown", "ArrowDown", "ArrowLeft", "ArrowRight", "ArrowLeft", "ArrowRight", "KeyB", "KeyA", "Enter" };
            _nextKey = _konami.FirstOrDefault();
            NavigationManager.NavigateTo("/Secret");
        }
    }
}