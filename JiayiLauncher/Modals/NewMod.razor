@using Microsoft.Win32
@using JiayiLauncher.Features.Mods
@using System.IO
@using System.Net
@using System.Net.Http

<div class="select">
    <div class="select-file">
        <JiayiButton OnClick="SelectFile">Select a file</JiayiButton>
        <p>
            to begin<br>
            .dll and .exe files only
        </p>
    </div>
    
    <div class="separator">
        <div class="separator-line"></div>
        <p>or</p>
        <div class="separator-line"></div>
    </div>
    
    <div class="url" @onkeydown="Enter">
        <p>@_urlStatus</p>
        <JiayiTextBox Style="width: 91%" Placeholder="cool-website.com/path/to/mod.dll" @ref="_urlTextBox"/>
    </div>
</div>

@code {
    [CascadingParameter]
    public IModalService ModalService { get; set; } = default!;
    
    [CascadingParameter]
    private BlazoredModalInstance Modal { get; set; } = default!;
    
    private JiayiTextBox? _urlTextBox;
    private string _urlStatus = "Enter the link to your mod";

    private async Task SelectFile()
    {
        var dialog = new OpenFileDialog
        {
            Title = "Select a mod",
            Filter = "Injectable libraries (*.dll)|*.dll|" +
                     "External clients and injectors (*.exe)|*.exe",
            Multiselect = false
        };

        if (dialog.ShowDialog() == true)
        {
            var path = dialog.FileName;
            var name = Path.GetFileNameWithoutExtension(path);

            if (ModCollection.Current!.HasMod(ModCollection.Current.GetRelativePath(path)))
            {
                Modal.SetTitle("Add a UNIQUE mod");
                return;
            }
            
            var mod = new Mod(name, path);
            
            var parameters = new ModalParameters()
                .Add(nameof(EditMod.Mod), mod);
            
            await Modal.CloseAsync(ModalResult.Ok());
            ModalService.Show<EditMod>("Edit mod", parameters);
        }
    }

    private async Task LinkSubmitted()
    {
        // wait for the text box to update
        await Task.Delay(10);
        
        var url = _urlTextBox?.Value;
        if (url is null or "") return;
        
        // prepend https if it's missing
        if (!url.StartsWith("http"))
            url = "https://" + url;
        
        if (ModCollection.Current!.HasMod(url))
        {
            _urlStatus = "This mod is already in your collection!";
            return;
        }

        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, url);
            using var client = new HttpClient();

            using var response = await client.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                var name = response.Content.Headers.ContentDisposition?.FileName ?? "Unknown";
                var mod = new Mod(Path.GetFileNameWithoutExtension(name), url);

                var parameters = new ModalParameters()
                    .Add(nameof(EditMod.Mod), mod);

                await Modal.CloseAsync();
                ModalService.Show<EditMod>("Edit mod", parameters);
            }
            else
            {
                _urlStatus = response.StatusCode switch
                {
                    HttpStatusCode.NotFound => "There's nothing at this address!",
                    HttpStatusCode.NoContent => "There's nothing at this address!",
                    _ => "Invalid link"
                };
            }
        }
        catch
        {
            _urlStatus = "Invalid link";
        }
    }

    private async Task Enter(KeyboardEventArgs obj)
    {
        if (obj.Key != "Enter") return;
        
        _urlStatus = "Checking link...";
        await LinkSubmitted();
    }

}