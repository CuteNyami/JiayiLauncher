@page "/Versions/Full/{version?}"
@using JiayiLauncher.Features.Versions
@using Microsoft.JSInterop

@* javascript :( *@
@inject IJSRuntime JavaScript

@inject NavigationManager NavigationManager

<div class="page-title" style="display: @_showTitle">
    <h4 @onclick="BackClicked">Version Manager</h4>
    <span class="material-symbols-sharp">arrow_right</span>
    <h3>Full version list</h3>
</div>

<div class="find-tools">
    <span class="material-symbols-sharp">search</span>
    <JiayiTextBox Placeholder="Search versions" @ref="_searchBox" Changed="StateHasChanged" />

    <p class="invisible-normalizer">invisible</p>
</div>

<div class="version-list-page">
    @if (_versionList != null)
    {
        var versions = _versionList.Where(
            v => v.Key.Contains(_searchBox?.Value ?? "", StringComparison.OrdinalIgnoreCase)).ToList();
        
        if (versions.Count == 0)
        {
            <i class="no-versions">No versions found</i>
        }
        else
        {
            <ul class="versions">
                @for (var i = 0; i < Math.Min(_amountToDisplay, versions.Count); i++)
                {
                    var name = versions[i].Key;
                    var version = versions[i].Value;
                    
                    <li class="version" id="@name">
                        <div class="version-text">
                            <strong>@name</strong>
                            <i>@_statuses[i]</i>
                        </div>

                        <div class="version-buttons">
                            @if (VersionManager.VersionInstalled(name))
                            {
                                <JiayiButton Size="JiayiButton.ButtonSize.Small" 
                                             OnClick="async () => await RemoveClicked(name)">Remove</JiayiButton>
                                <JiayiButton Size="JiayiButton.ButtonSize.Small">Switch</JiayiButton>
                            }
                            else
                            {
                                <JiayiButton Size="JiayiButton.ButtonSize.Small"
                                             Disabled="@_buttonStates[i]"
                                             OnClick="async () => await DownloadClicked(version)">
                                    Download
                                </JiayiButton>
                            }
                        </div>
                    </li>
                }
            </ul>
            
            @if (versions.Count > _amountToDisplay)
            {
                <div class="load-more" @onclick="() => _amountToDisplay += 10">
                    <a>Load more</a>
                    <span class="material-symbols-sharp">expand_more</span>
                </div>
            }
        }
    }
</div>

@code {
    [Parameter]
    public string? Version { get; set; }
    
    [Parameter]
    public bool ShowTitle { get; set; } = true;
    
    [CascadingParameter]
    public IModalService ModalService { get; set; } = default!;

    private Dictionary<string, MinecraftVersion>? _versionList;
    private int _amountToDisplay = 10;
    private List<string> _statuses = new();
    private List<bool> _buttonStates = new();

    private JiayiTextBox? _searchBox;

    private string _showTitle => ShowTitle ? "flex" : "none";

    protected override async Task OnInitializedAsync()
    {
        _versionList = await VersionList.GetFullVersionList();
        _statuses = new string[_versionList.Count].ToList();
        _buttonStates = new bool[_versionList.Count].ToList();
        
        VersionManager.DownloadFinished += (_, _) =>
        {
            _statuses = new string[_versionList.Count].ToList();
            _buttonStates = new bool[_versionList.Count].ToList();
            StateHasChanged();
        };
    }

    protected override async Task OnParametersSetAsync()
    {
        Version ??= "None";
        if (Version == "None") return;
        
        var index = _versionList?.Keys.ToList().IndexOf(Version);
        _amountToDisplay = index is > 0 ? index.Value + 5 : 10;
        
        // refresh state so js can scroll to the version
        StateHasChanged();
        await Task.Delay(100);
    
        var element = await JavaScript.InvokeAsync<IJSObjectReference>("document.getElementById", Version);
        await element.InvokeVoidAsync("scrollIntoView", new { behavior = "smooth", block = "center" });
    }

    private void BackClicked()
    {
        NavigationManager.NavigateTo("/Versions");
    }

    private async Task DownloadClicked(MinecraftVersion ver)
    {
        var i = _versionList?.Keys.ToList().IndexOf(ver.Version) ?? 0;
        
        var progress = new Progress<int>(x =>
        {
            _statuses[i] = x == 100 ? $"{x}% downloaded" : "Extracting...";
        });
        
        _statuses[i] = "Downloading...";
        _buttonStates[i] = true;
        
        await VersionManager.DownloadVersion(ver, progress);
        
        _statuses[i] = string.Empty;
        _buttonStates[i] = false;
        StateHasChanged();
    }

    private async Task RemoveClicked(string ver)
    {
        var options = new List<(string, EventCallback)>
        {
            ("Yes", new EventCallback(null, async () =>
            {
                await VersionManager.RemoveVersion(ver);
                StateHasChanged();
            })),
            ("No", EventCallback.Empty)
        };

        var parameters = new ModalParameters()
            .Add(nameof(MessageBox.Buttons), options)
            .Add(nameof(MessageBox.Message), "Are you sure you want to remove this version?");
        
        var modal = ModalService.Show<MessageBox>("Remove version", parameters);
        await modal.Result;
        StateHasChanged();
    }
}