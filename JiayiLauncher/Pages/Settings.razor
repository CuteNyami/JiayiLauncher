@page "/Settings"
@using JiayiLauncher.Settings
@using System.Reflection
@using JiayiLauncher.Settings.Special

<h3>Settings</h3>

<div class="tabs">
    @foreach (var category in JiayiSettings.Instance!.GetCategories())
    {
        <a class="tab-button" onclick="">@category</a>
    }
</div>

<div class="settings-container">
    @foreach (var category in JiayiSettings.Instance.GetCategories())
    {
        <h4 id="@category.ToLower()">@category</h4>
                    
        @foreach (var setting in JiayiSettings.Instance.GetSettingsInCategory(category))
        {
            var settingInfo = setting.GetCustomAttribute<SettingAttribute>();
            var dependentSetting = JiayiSettings.Instance.GetSetting(settingInfo!.Dependency);
            if (dependentSetting == null 
                || (dependentSetting.PropertyType == typeof(bool) && (bool?)dependentSetting.GetValue(JiayiSettings.Instance) == true))
            {
                <div class="setting">
                    <div class="setting-info">
                        <strong>@settingInfo.Name</strong>
                        <p class="setting-description">@settingInfo.Description</p>
                    </div>
                
                

                    @switch (true)
                    {
                        case true when setting.PropertyType == typeof(bool):
                            <JiayiToggle Checked="@((bool?)setting.GetValue(JiayiSettings.Instance) ?? false)"
                                         CheckedChanged="value => ChangeBoolSetting(value, setting)"/>
                            break;
                        case true when setting.PropertyType == typeof(string):
                            <JiayiTextBox 
                                Placeholder="@settingInfo.Name" 
                                Style="width: -webkit-fill-available; max-width: 40%;" 
                                Value="@((string?)setting.GetValue(JiayiSettings.Instance) ?? string.Empty)"
                                Changed="value => ChangeStringSetting(value, setting)"/>
                            break;
                        case true when setting.PropertyType == typeof(SliderSetting):
                            <JiayiSlider 
                                Min="((SliderSetting)setting.GetValue(JiayiSettings.Instance)!).Range.Start.Value" 
                                Max="((SliderSetting)setting.GetValue(JiayiSettings.Instance)!).Range.End.Value" 
                                Value="((SliderSetting)setting.GetValue(JiayiSettings.Instance)!).Value" 
                                Style="width: -webkit-fill-available; max-width: 40%;"
                                ValueChanged="value => ChangeSliderSetting((SliderSetting)setting.GetValue(JiayiSettings.Instance)!, value, setting)"/>
                            break;
                    }
                </div>
            }
        }
    }
</div>

@code {
    private void ChangeStringSetting(string? value, PropertyInfo setting)
    {
        setting.SetValue(JiayiSettings.Instance, value ?? string.Empty);
        JiayiSettings.Instance!.Save();
    }
    
    private void ChangeBoolSetting(bool value, PropertyInfo setting)
    {
        setting.SetValue(JiayiSettings.Instance, value);
        JiayiSettings.Instance!.Save();
    }
    
    private void ChangeSliderSetting(SliderSetting slider, int value, PropertyInfo setting)
    {
        var sliderSetting = new SliderSetting(slider.Range.Start.Value, slider.Range.End.Value, value);
        setting.SetValue(JiayiSettings.Instance, sliderSetting);
        JiayiSettings.Instance!.Save();
    }
}