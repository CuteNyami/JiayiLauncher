@using JiayiLauncher.Shared.Components.Mods
@using System.IO
@using JiayiLauncher.Features.Mods
@using JiayiLauncher.Settings

@page "/Mods"

<h3>Mods</h3>

<div class="find-tools">
    <span class="material-symbols-sharp">search</span>
    <JiayiTextBox Placeholder="Search mods" @ref="_searchBox" Changed="StateHasChanged"/>

    <div class="separator"></div>

    <span class="material-symbols-sharp">filter_list</span>
    <p>Filter by:</p>
    <JiayiFilter @ref="_localFilter" Changed="StateHasChanged">Locally stored</JiayiFilter>
    <JiayiFilter @ref="_onlineFilter" Changed="StateHasChanged">From the web</JiayiFilter>
</div>

<div class="mods"> 
    <ul class="mod-list">
        @if (JiayiSettings.Instance!.ModCollectionPath != string.Empty)
        {
            var mods = new List<Mod>();
            if (_localFilter is {Checked: true})
            {
                mods.AddRange(ModCollection.Current!.Mods.Where(mod => !mod.FromInternet));
            }
            
            if (_onlineFilter is {Checked: true})
            {
                mods.AddRange(ModCollection.Current!.Mods.Where(mod => mod.FromInternet));
            }
            
            if (mods.Count == 0)
            {
                mods = ModCollection.Current!.Mods;
            }

            _searchResults = 0;
            
            foreach (var mod in mods)
            {
                @if (_searchBox is {Value: not null and not "" })
                {
                    if (mod.Name.ToLower().Contains(_searchBox.Value.ToLower()))
                    {
                        _searchResults++;
                        <JiayiModCard Mod="@mod" />
                    }
                }
                else
                {
                    <JiayiModCard Mod="@mod" />
                    _searchResults++;
                }
            }
        }
    </ul>
    @if (_searchResults == 0 && ModCollection.Current?.Mods.Count > 0)
    {
        <p style="text-align: center; margin-top: 0;">No results found.</p>
    }
    <p class="add-new" @ondragenter="OnDragEnter" @ondragleave="OnDragLeave" @ondragover="OnDragEnter" data-hovered="@_hovered">
        @if (JiayiSettings.Instance.ModCollectionPath != string.Empty)
        {
            <label class="drag-area">
                Drag mods, folders, or URLs here<br>
                or click the plus icon to add mods
                <InputFile OnChange="FileDropped" multiple @onclick:preventDefault />
            </label>
        }
        else
        {
            <label class="drag-area">
                You don't have a mods folder set up.<br><br>
                Drag a folder here to make it work with Jiayi,<br>
                or add mods to create a new folder.
                <InputFile OnChange="FileDropped" multiple @onclick:preventDefault />
            </label>
        }
    </p>
</div>

<button class="add-button" @onclick="@ShowAddMods">
    <span class="material-symbols-sharp">add</span>
</button>

@code {
    [CascadingParameter]
    public IModalService ModalService { get; set; } = default!;
    
    public static Mods Instance { get; private set; } = default!;

    private string _hovered = "no";
    
    // refs
    private JiayiTextBox? _searchBox;
    private JiayiFilter? _localFilter;
    private JiayiFilter? _onlineFilter;
    
    private int _searchResults;
    
    protected override void OnInitialized()
    {
        Instance = this;
    }
    
    public void Refresh() => StateHasChanged();

    private async Task ShowAddMods()
    {
        var modal = ModalService.Show<NewMod>("Add new mod");
        await modal.Result;
    }

    private void OnDragEnter(DragEventArgs obj)
    {
        var transfer = obj.DataTransfer;
        if (transfer.Types.Length <= 0) return;
        if (transfer.Types.Contains("Files") || transfer.Types.Contains("text/uri-list"))
        {
            _hovered = "yes";
        }
    }

    private void OnDragLeave(DragEventArgs obj)
    {
        _hovered = "no";
    }

    private async Task FileDropped(InputFileChangeEventArgs obj)
    {
        _hovered = "no";
        
        var files = obj.GetMultipleFiles(50);

        if (files.Count == 1)
        {
            var file = files[0];
            var mod = await ModImporter.ImportFromBrowserFile(file);
            
            var parameters = new ModalParameters()
                .Add(nameof(EditMod.Mod), mod);
            
            var modal = ModalService.Show<EditMod>("Edit mod", parameters);
            await modal.Result;
        }
        else if (files.Count > 1)
        {
            var mods = await ModImporter.ImportFromBrowserFiles(files);
            
            // don't bother showing the edit mod modal

            if (ModCollection.Current == null)
            {
                var options = new List<(string, EventCallback)>
                {
                    ("Yes", new EventCallback(null, () =>
                    {
                        JiayiSettings.Instance!.ModCollectionPath = 
                            Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "Jiayi Mods");
                        JiayiSettings.Instance.Save();
                        ModCollection.Load(JiayiSettings.Instance.ModCollectionPath);
                        
                        foreach (var mod in mods)
                        {
                            ModCollection.Current!.Add(mod);
                        }
                    })),
                    ("No", EventCallback.Empty)
                };
                
                var parameters = new ModalParameters()
                    .Add(nameof(MessageBox.Buttons), options)
                    .Add(nameof(MessageBox.Message), "Since you don't have a mods folder set up, Jiayi will make one for you to import these mods. Is that okay? It will be in your documents.");
                
                var modal = ModalService.Show<MessageBox>("Import", parameters);
                await modal.Result;
                Refresh();
                return;
            }
            
            foreach (var mod in mods)
            {
                ModCollection.Current.Add(mod);
            }
        }
    }

}